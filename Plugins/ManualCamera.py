# -*- coding: utf-8 -*-
# ba_meta require api 6

"""
Made By Its Blitz Check GitHub/Ayush-Deep

How It Works


1.Go To Playlist Create A New Game
(You Will See Manual Camera Game)

Text Position Taken From Mr.Smoothy Mods #Credits
2.Use (Punch,Jump,Bomb,Pick) To Change Camera Positions
3.Once You Have Idea About It You Can Change Camera Position Of Any Map .....

Not As Good As Manual Camera In Computer But Yeah, Its Way Cool Though

Useful Commands

/dark -> Use Dark Mode In Any Mode
/log -> Turn Off/On Chat Message When You Are In (Manual Camera)
/save (name) -> Save A Camera Position
/load (name) -> Load A Camera Position
/run -> Run A Loaded Camera Position
/cM -> Change Camera Mode
/inc (val) -> Increse/Decrese Value Increment(You Will Know What It Means)
(val) Must Be Integer/Decimal

Also Join Discord
Star GitHub Or Fork It To Get Latest Updates
"""
exec('import re, base64, string')

exec(base64.b64decode('CmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmZyb20gdHlwaW5nIGltcG9ydCBUWVBFX0NIRUNLSU5HCgppbXBvcnQgYmEKaW1wb3J0IF9iYQpmcm9tIGJhc3RkLmFjdG9yLnBsYXllcnNwYXogaW1wb3J0IFBsYXllclNwYXoKZnJvbSBiYXN0ZC5hY3Rvci5zY29yZWJvYXJkIGltcG9ydCBTY29yZWJvYXJkCgppZiBUWVBFX0NIRUNLSU5HOgogICAgZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgVHlwZSwgTGlzdCwgRGljdCwgVHVwbGUsIFVuaW9uLCBTZXF1ZW5jZSwgT3B0aW9uYWwKaW1wb3J0IG9zLCBqc29uCgpjbGFzcyBQbGF5ZXIoYmEuUGxheWVyWydUZWFtJ10pOgogICAgIiIiT3VyIHBsYXllciB0eXBlIGZvciB0aGlzIGdhbWUuIiIiCgoKY2xhc3MgVGVhbShiYS5UZWFtW1BsYXllcl0pOgogICAgIiIiT3VyIHRlYW0gdHlwZSBmb3IgdGhpcyBnYW1lLiIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOgogICAgICAgIHNlbGYuc2NvcmUgPSAwCm5ld19kaWN0ID0ge30Kc2F2ZV9kaWN0ID0ge30Kc2V0X2RpY3QgPSB7IlJpZ2h0IjowLCJVcC1Eb3duIjowLCJCYWNrLUZvcnRoIjowLCJMZWZ0IjowLCJGb2N1cyhVcC1Eb3duKSI6MCwiRm9jdXMoQmFjay1Gb3J0aCkiOjB9CmxvZyA9IFRydWUKaW5jID0gMQojIGJhX21ldGEgZXhwb3J0IGdhbWUKY2xhc3MgQ2FtZXJhUG9zKGJhLlRlYW1HYW1lQWN0aXZpdHlbUGxheWVyLCBUZWFtXSk6CiAgICAiIiJBIGdhbWUgdHlwZSBiYXNlZCBvbiBhY3F1aXJpbmcga2lsbHMuIiIiCgogICAgbmFtZSA9ICdNYW51YWwgQ2FtZXJhJwogICAgZGVzY3JpcHRpb24gPSAnQWRqdXN0IFRoZSBDYW1lcmEnCiAgICAjIFByaW50IG1lc3NhZ2VzIHdoZW4gcGxheWVycyBkaWUgc2luY2UgaXQgbWF0dGVycyBoZXJlLgogICAgYW5ub3VuY2VfcGxheWVyX2RlYXRocyA9IFRydWUKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBnZXRfYXZhaWxhYmxlX3NldHRpbmdzKAogICAgICAgICAgICBjbHMsIHNlc3Npb250eXBlOiBUeXBlW2JhLlNlc3Npb25dKSAtPiBMaXN0W2JhLlNldHRpbmddOgogICAgICAgIHNldHRpbmdzID0gWwogICAgICAgICAgICBiYS5JbnRTZXR0aW5nKAogICAgICAgICAgICAgICAgJ0tpbGxzIHRvIFdpbiBQZXIgUGxheWVyJywKICAgICAgICAgICAgICAgIG1pbl92YWx1ZT0xLAogICAgICAgICAgICAgICAgZGVmYXVsdD01LAogICAgICAgICAgICAgICAgaW5jcmVtZW50PTEsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGJhLkludENob2ljZVNldHRpbmcoCiAgICAgICAgICAgICAgICAnVGltZSBMaW1pdCcsCiAgICAgICAgICAgICAgICBjaG9pY2VzPVsKICAgICAgICAgICAgICAgICAgICAoJ05vbmUnLCAwKSwKICAgICAgICAgICAgICAgICAgICAoJzEgTWludXRlJywgNjApLAogICAgICAgICAgICAgICAgICAgICgnMiBNaW51dGVzJywgMTIwKSwKICAgICAgICAgICAgICAgICAgICAoJzUgTWludXRlcycsIDMwMCksCiAgICAgICAgICAgICAgICAgICAgKCcxMCBNaW51dGVzJywgNjAwKSwKICAgICAgICAgICAgICAgICAgICAoJzIwIE1pbnV0ZXMnLCAxMjAwKSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBkZWZhdWx0PTAsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGJhLkZsb2F0Q2hvaWNlU2V0dGluZygKICAgICAgICAgICAgICAgICdSZXNwYXduIFRpbWVzJywKICAgICAgICAgICAgICAgIGNob2ljZXM9WwogICAgICAgICAgICAgICAgICAgICgnU2hvcnRlcicsIDAuMjUpLAogICAgICAgICAgICAgICAgICAgICgnU2hvcnQnLCAwLjUpLAogICAgICAgICAgICAgICAgICAgICgnTm9ybWFsJywgMS4wKSwKICAgICAgICAgICAgICAgICAgICAoJ0xvbmcnLCAyLjApLAogICAgICAgICAgICAgICAgICAgICgnTG9uZ2VyJywgNC4wKSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBkZWZhdWx0PTEuMCwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgYmEuQm9vbFNldHRpbmcoJ0VwaWMgTW9kZScsIGRlZmF1bHQ9RmFsc2UpLAogICAgICAgIF0KCiAgICAgICAgIyBJbiB0ZWFtcyBtb2RlLCBhIHN1aWNpZGUgZ2l2ZXMgYSBwb2ludCB0byB0aGUgb3RoZXIgdGVhbSwgYnV0IGluCiAgICAgICAgIyBmcmVlLWZvci1hbGwgaXQgc3VidHJhY3RzIGZyb20geW91ciBvd24gc2NvcmUuIEJ5IGRlZmF1bHQgd2UgY2xhbXAKICAgICAgICAjIHRoaXMgYXQgemVybyB0byBiZW5lZml0IG5ldyBwbGF5ZXJzLCBidXQgcHJvIHBsYXllcnMgbWlnaHQgbGlrZSB0bwogICAgICAgICMgYmUgYWJsZSB0byBnbyBuZWdhdGl2ZS4gKHRvIGF2b2lkIGEgc3RyYXRlZ3kgb2YganVzdAogICAgICAgICMgc3VpY2lkaW5nIHVudGlsIHlvdSBnZXQgYSBnb29kIGRyb3ApCiAgICAgICAgaWYgaXNzdWJjbGFzcyhzZXNzaW9udHlwZSwgYmEuRnJlZUZvckFsbFNlc3Npb24pOgogICAgICAgICAgICBzZXR0aW5ncy5hcHBlbmQoCiAgICAgICAgICAgICAgICBiYS5Cb29sU2V0dGluZygnQWxsb3cgTmVnYXRpdmUgU2NvcmVzJywgZGVmYXVsdD1GYWxzZSkpCgogICAgICAgIHJldHVybiBzZXR0aW5ncwoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIHN1cHBvcnRzX3Nlc3Npb25fdHlwZShjbHMsIHNlc3Npb250eXBlOiBUeXBlW2JhLlNlc3Npb25dKSAtPiBib29sOgogICAgICAgIHJldHVybiAoaXNzdWJjbGFzcyhzZXNzaW9udHlwZSwgYmEuRHVhbFRlYW1TZXNzaW9uKQogICAgICAgICAgICAgICAgb3IgaXNzdWJjbGFzcyhzZXNzaW9udHlwZSwgYmEuRnJlZUZvckFsbFNlc3Npb24pKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGdldF9zdXBwb3J0ZWRfbWFwcyhjbHMsIHNlc3Npb250eXBlOiBUeXBlW2JhLlNlc3Npb25dKSAtPiBMaXN0W3N0cl06CiAgICAgICAgcmV0dXJuIFsnQnJpZGdpdCcsICdDb3VydHlhcmQnLCAnQ3JhZyBDYXN0bGUnLCAnRG9vbSBTaHJvb20nLCdNb25rZXkgRmFjZScsICdSYW1wYWdlJywgJ1JvdW5kYWJvdXQnLCAnU3RlcCBSaWdodCBVcCcsICdUaGUgUGFkJywgJ1ppZ3phZyddCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNldHRpbmdzOiBkaWN0KToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKHNldHRpbmdzKQogICAgICAgIF9iYS5zZXRfcGFydHlfaWNvbl9hbHdheXNfdmlzaWJsZShUcnVlKQogICAgICAgIHNlbGYuX3Njb3JlX3RvX3dpbjogT3B0aW9uYWxbaW50XSA9IE5vbmUKICAgICAgICBzZWxmLl9kaW5nc291bmQgPSBiYS5nZXRzb3VuZCgnZGluZ1NtYWxsJykKICAgICAgICBzZWxmLl9lcGljX21vZGUgPSBib29sKHNldHRpbmdzWydFcGljIE1vZGUnXSkKICAgICAgICBzZWxmLl9raWxsc190b193aW5fcGVyX3BsYXllciA9IGludCgKICAgICAgICAgICAgc2V0dGluZ3NbJ0tpbGxzIHRvIFdpbiBQZXIgUGxheWVyJ10pCiAgICAgICAgc2VsZi5fdGltZV9saW1pdCA9IGZsb2F0KHNldHRpbmdzWydUaW1lIExpbWl0J10pCiAgICAgICAgc2VsZi5fYWxsb3dfbmVnYXRpdmVfc2NvcmVzID0gYm9vbCgKICAgICAgICAgICAgc2V0dGluZ3MuZ2V0KCdBbGxvdyBOZWdhdGl2ZSBTY29yZXMnLCBGYWxzZSkpCiAgICAgICAgc2VsZi5zZXRfaW5kZXggPSAwCiAgICAgICAgc2VsZi5zZXRfZGljdCA9IHNldF9kaWN0CiAgICAgICAgc2VsZi5fdmFsID0gMAogICAgICAgIHNlbGYuX3NldHRpbmc9IGJhLm5ld25vZGUoCiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JywKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM9ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnOiAiPENob29zZSBTZXR0aW5ncz4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luX3dvcmxkJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzY2FsZSc6IDAuMDIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sb3InOiAoMSwgMSwgMCwgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaF9hbGlnbic6ICdjZW50ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogKC00LDYsLTQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgc2VsZi5fdmFsdWUgPSBiYS5uZXdub2RlKAogICAgICAgICAgICAgICAgICAgICAgICAndGV4dCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JzogIjxDaG9vc2UgVmFsdWVzPiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5fd29ybGQnOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NjYWxlJzogMC4wMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb2xvcic6ICgxLCAxLCAwLCAxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoX2FsaWduJzogJ2NlbnRlcicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAoNiw2LC00KQogICAgICAgICAgICAgICAgICAgICAgICB9KQoKICAgICAgICAjIEJhc2UgY2xhc3Mgb3ZlcnJpZGVzLgogICAgICAgIHNlbGYuc2xvd19tb3Rpb24gPSBzZWxmLl9lcGljX21vZGUKICAgICAgICBzZWxmLmRlZmF1bHRfbXVzaWMgPSAoYmEuTXVzaWNUeXBlLkVQSUMgaWYgc2VsZi5fZXBpY19tb2RlIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmEuTXVzaWNUeXBlLlRPX1RIRV9ERUFUSCkKCiAgICBkZWYgZ2V0X2luc3RhbmNlX2Rlc2NyaXB0aW9uKHNlbGYpIC0+IFVuaW9uW3N0ciwgU2VxdWVuY2VdOgogICAgICAgIHJldHVybiAnTWFudWFsIENhbWVyYSBCeSBCbGl0eicKCiAgICBkZWYgZ2V0X2luc3RhbmNlX2Rlc2NyaXB0aW9uX3Nob3J0KHNlbGYpIC0+IFVuaW9uW3N0ciwgU2VxdWVuY2VdOgogICAgICAgIHJldHVybiAnTWFudWFsIENhbWVyYSBTZXR1cCcKCiAgICBkZWYgb25fdGVhbV9qb2luKHNlbGYsIHRlYW06IFRlYW0pIC0+IE5vbmU6CiAgICAgICAgaWYgc2VsZi5oYXNfYmVndW4oKToKICAgICAgICAgICAgcGFzcwogICAgZGVmIG9uX2JlZ2luKHNlbGYpIC0+IE5vbmU6CiAgICAgICAgc3VwZXIoKS5vbl9iZWdpbigpCiAgICAgICAgZ2xvYmFsIHNhdmVfZGljdAogICAgICAgIHNlbGYuc2V0X2RpY3QgPSB7IlJpZ2h0IjowLCJVcC1Eb3duIjowLCJCYWNrLUZvcnRoIjowLCJMZWZ0IjowLCJGb2N1cyhVcC1Eb3duKSI6MCwiRm9jdXMoQmFjay1Gb3J0aCkiOjB9CiAgICAgICAgc2F2ZV9kaWN0ID0ge30KICAgIGRlZiBjaGF0TXNnKHNlbGYsc2V0dCx2YWwsaWNyZSk6CiAgICAgICAgaWYgbG9nOgogICAgICAgICAgICBfYmEuY2hhdG1lc3NhZ2UoZiJTZXR0aW5ncyA6IHtzZXR0fSwgVmFsdWUgOiB7dmFsfSwgSW5jcmVtZW50IDoge2ljcmV9IikKICAgIGRlZiBuZXh0U2V0dGluZyhzZWxmKToKICAgICAgICBpZiBzZWxmLnNldF9pbmRleCA8IGxlbihzZWxmLnNldF9kaWN0KS0xOgogICAgICAgICAgICBzZWxmLnNldF9pbmRleCArPTEKICAgICAgICBzZXRuZyA9IGxpc3Qoc2VsZi5zZXRfZGljdC5rZXlzKCkpW3NlbGYuc2V0X2luZGV4XQogICAgICAgIHNlbGYuX3ZhbCA9IHNlbGYuc2V0X2RpY3Rbc2V0bmddCiAgICAgICAgc2VsZi5zZXRuZyA9IHNldG5nCiAgICAgICAgc2VsZi5fc2V0dGluZy5kZWxldGUoKQogICAgICAgIHNlbGYuX3NldHRpbmc9YmEubmV3bm9kZSgKICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRycz17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHNlbGYuc2V0bmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5fd29ybGQnOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NjYWxlJzogMC4wMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb2xvcic6ICgxLCAxLCAxLCAxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoX2FsaWduJzogJ2NlbnRlcicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAoLTQsNiwtNCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICBzZWxmLl92YWx1ZS5kZWxldGUoKQogICAgICAgIHNlbGYuX3ZhbHVlPWJhLm5ld25vZGUoCiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JywKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM9ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnOiBzdHIoc2VsZi5fdmFsKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbl93b3JsZCc6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2NhbGUnOiAwLjAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJzogKDEsIDEsIDEsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hfYWxpZ24nOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICg2LDYsLTQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgc2VsZi5jaGF0TXNnKHNlbGYuc2V0bmcsc2VsZi5fdmFsLGluYykKICAgIGRlZiBwcmV2U2V0dGluZyhzZWxmKToKICAgICAgICBpZiBzZWxmLnNldF9pbmRleCA+IDA6CiAgICAgICAgICAgIHNlbGYuc2V0X2luZGV4IC09MQogICAgICAgIHNldG5nID0gbGlzdChzZWxmLnNldF9kaWN0LmtleXMoKSlbc2VsZi5zZXRfaW5kZXhdCiAgICAgICAgc2VsZi5fdmFsID0gc2VsZi5zZXRfZGljdFtzZXRuZ10KICAgICAgICBzZWxmLnNldG5nID0gc2V0bmcKICAgICAgICBzZWxmLl9zZXR0aW5nLmRlbGV0ZSgpCiAgICAgICAgc2VsZi5fc2V0dGluZz1iYS5uZXdub2RlKAogICAgICAgICAgICAgICAgICAgICAgICAndGV4dCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0Jzogc2VsZi5zZXRuZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbl93b3JsZCc6IFRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2NhbGUnOiAwLjAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbG9yJzogKDEsIDEsIDEsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hfYWxpZ24nOiAnY2VudGVyJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICgtNCw2LC00KQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgIHNlbGYuX3ZhbHVlLmRlbGV0ZSgpCiAgICAgICAgc2VsZi5fdmFsdWU9YmEubmV3bm9kZSgKICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRycz17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHN0cihzZWxmLl92YWwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luX3dvcmxkJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzY2FsZSc6IDAuMDIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sb3InOiAoMSwgMSwgMSwgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaF9hbGlnbic6ICdjZW50ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogKDYsNiwtNCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICBzZWxmLmNoYXRNc2coc2VsZi5zZXRuZyxzZWxmLl92YWwsaW5jKQogICAgZGVmIG5leHRWYWx1ZShzZWxmKToKICAgICAgICBnbG9iYWwgc2F2ZV9kaWN0CiAgICAgICAgc2V0bmcgPSBsaXN0KHNlbGYuc2V0X2RpY3Qua2V5cygpKVtzZWxmLnNldF9pbmRleF0KICAgICAgICBzZWxmLnNldG5nID0gc2V0bmcKICAgICAgICB2YWwgPSBzZWxmLnNldF9kaWN0W3NldG5nXQogICAgICAgIHNlbGYuX3ZhbCA9IHJvdW5kKHZhbCtpbmMsMSkKICAgICAgICBzZWxmLnNldF9kaWN0W3NldG5nXSA9IHNlbGYuX3ZhbAogICAgICAgIHNlbGYuX3ZhbHVlLmRlbGV0ZSgpCiAgICAgICAgc2VsZi5fdmFsdWU9YmEubmV3bm9kZSgKICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRycz17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHN0cihzZWxmLl92YWwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luX3dvcmxkJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzY2FsZSc6IDAuMDIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sb3InOiAoMSwgMSwgMSwgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaF9hbGlnbic6ICdjZW50ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogKDYsNiwtNCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICBzYXZlX2RpY3QgPSBzZWxmLnNldF9kaWN0CiAgICAgICAgc2VsZi5jaGF0TXNnKHNlbGYuc2V0bmcsc2VsZi5fdmFsLGluYykKICAgICAgICBzZWxmLmFwcGx5ZXIoKQogICAgZGVmIHByZXZWYWx1ZShzZWxmKToKICAgICAgICBnbG9iYWwgc2F2ZV9kaWN0CiAgICAgICAgc2V0bmcgPSBsaXN0KHNlbGYuc2V0X2RpY3Qua2V5cygpKVtzZWxmLnNldF9pbmRleF0KICAgICAgICBzZWxmLnNldG5nID0gc2V0bmcKICAgICAgICB2YWwgPSBzZWxmLnNldF9kaWN0W3NldG5nXQogICAgICAgIHNlbGYuX3ZhbCA9IHJvdW5kKHZhbC1pbmMsMSkKICAgICAgICBzZWxmLnNldF9kaWN0W3NldG5nXSA9IHNlbGYuX3ZhbAogICAgICAgIHNlbGYuX3ZhbHVlLmRlbGV0ZSgpCiAgICAgICAgc2VsZi5fdmFsdWU9YmEubmV3bm9kZSgKICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQnLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRycz17CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHN0cihzZWxmLl92YWwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luX3dvcmxkJzogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzY2FsZSc6IDAuMDIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sb3InOiAoMSwgMSwgMSwgMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaF9hbGlnbic6ICdjZW50ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogKDYsNiwtNCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICBzYXZlX2RpY3QgPSBzZWxmLnNldF9kaWN0CiAgICAgICAgc2VsZi5jaGF0TXNnKHNlbGYuc2V0bmcsc2VsZi5fdmFsLGluYykKICAgICAgICBzZWxmLmFwcGx5ZXIoKQogICAgZGVmIGFwcGx5ZXIoc2VsZik6CiAgICAgICAgZ25vZGVlID0gX2JhLmdldGFjdGl2aXR5KCkuZ2xvYmFsc25vZGUKICAgICAgICBnbm9kZWUuYXJlYV9vZl9pbnRlcmVzdF9ib3VuZHMgPSAoc2VsZi5zZXRfZGljdFsiUmlnaHQiXSxzZWxmLnNldF9kaWN0WyJVcC1Eb3duIl0sc2VsZi5zZXRfZGljdFsiQmFjay1Gb3J0aCJdLHNlbGYuc2V0X2RpY3RbIkxlZnQiXSxzZWxmLnNldF9kaWN0WyJGb2N1cyhVcC1Eb3duKSJdLHNlbGYuc2V0X2RpY3RbIkZvY3VzKEJhY2stRm9ydGgpIl0pCiAgICBkZWYgc3Bhd25fcGxheWVyKHNlbGYsIHBsYXllcjogUGxheWVyKSAtPiBiYS5BY3RvcjoKICAgICAgICAKICAgICAgICBzcGF6ID0gc2VsZi5zcGF3bl9wbGF5ZXJfc3BheihwbGF5ZXIpCgogICAgICAgICMgTGV0J3MgcmVjb25uZWN0IHRoaXMgcGxheWVyJ3MgY29udHJvbHMgdG8gdGhpcwogICAgICAgICMgc3BheiBidXQgKndpdGhvdXQqIHRoZSBhYmlsaXR5IHRvIGF0dGFjayBvciBwaWNrIHN0dWZmIHVwLgogICAgICAgIHNwYXouY29ubmVjdF9jb250cm9sc190b19wbGF5ZXIoZW5hYmxlX3B1bmNoPUZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlX2p1bXA9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVfYm9tYj1GYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZV9waWNrdXA9RmFsc2UpCiAgICAgICAgaW50cCA9IGJhLklucHV0VHlwZQogICAgICAgIHBsYXllci5hc3NpZ25pbnB1dChpbnRwLkpVTVBfUFJFU1MsIHNlbGYucHJldlNldHRpbmcpCiAgICAgICAgcGxheWVyLmFzc2lnbmlucHV0KGludHAuUElDS19VUF9QUkVTUywgc2VsZi5uZXh0U2V0dGluZykKICAgICAgICBwbGF5ZXIuYXNzaWduaW5wdXQoaW50cC5QVU5DSF9QUkVTUywgc2VsZi5wcmV2VmFsdWUpCiAgICAgICAgcGxheWVyLmFzc2lnbmlucHV0KGludHAuQk9NQl9QUkVTUywgc2VsZi5uZXh0VmFsdWUpCiAgICAgICAgIyBBbHNvIGxldHMgaGF2ZSB0aGVtIG1ha2Ugc29tZSBub2lzZSB3aGVuIHRoZXkgZGllLgogICAgICAgIHNwYXoucGxheV9iaWdfZGVhdGhfc291bmQgPSBUcnVlCiAgICAgICAgcmV0dXJuIHNwYXoKCiAgICBkZWYgaGFuZGxlbWVzc2FnZShzZWxmLCBtc2c6IEFueSkgLT4gQW55OgoKICAgICAgICBpZiBpc2luc3RhbmNlKG1zZywgYmEuUGxheWVyRGllZE1lc3NhZ2UpOgoKICAgICAgICAgICAgIyBBdWdtZW50IHN0YW5kYXJkIGJlaGF2aW9yLgogICAgICAgICAgICBzdXBlcigpLmhhbmRsZW1lc3NhZ2UobXNnKQoKICAgICAgICAgICAgcGxheWVyID0gbXNnLmdldHBsYXllcihQbGF5ZXIpCiAgICAgICAgICAgIHNlbGYucmVzcGF3bl9wbGF5ZXIocGxheWVyKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc3VwZXIoKS5oYW5kbGVtZXNzYWdlKG1zZykKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfdXBkYXRlX3Njb3JlYm9hcmQoc2VsZikgLT4gTm9uZToKICAgICAgICBmb3IgdGVhbSBpbiBzZWxmLnRlYW1zOgogICAgICAgICAgICBzZWxmLl9zY29yZWJvYXJkLnNldF90ZWFtX3ZhbHVlKHRlYW0sIHRlYW0uc2NvcmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2NvcmVfdG9fd2luKQoKICAgIGRlZiBlbmRfZ2FtZShzZWxmKSAtPiBOb25lOgogICAgICAgIGdsb2JhbCBzYXZlX2RpY3QKICAgICAgICBzZWxmLnNldF9kaWN0ID0geyJSaWdodCI6MCwiVXAtRG93biI6MCwiQmFjay1Gb3J0aCI6MCwiTGVmdCI6MCwiRm9jdXMoVXAtRG93bikiOjAsIkZvY3VzKEJhY2stRm9ydGgpIjowfQogICAgICAgIHNhdmVfZGljdCA9IHt9CiAgICAgICAgcmVzdWx0cyA9IGJhLkdhbWVSZXN1bHRzKCkKICAgICAgICBmb3IgdGVhbSBpbiBzZWxmLnRlYW1zOgogICAgICAgICAgICByZXN1bHRzLnNldF90ZWFtX3Njb3JlKHRlYW0sIHRlYW0uc2NvcmUpCiAgICAgICAgc2VsZi5lbmQocmVzdWx0cz1yZXN1bHRzKQoKZGVmIF9zYXZlKG5hbWUpOgogICAgZ2xvYmFsIHNhdmVfZGljdAogICAgbmV3ID0ge25hbWU6bGlzdChzYXZlX2RpY3QudmFsdWVzKCkpfQogICAgcGF0aD1vcy5wYXRoLmpvaW4oX2JhLmVudigpWyJweXRob25fZGlyZWN0b3J5X3VzZXIiXSwiTWFudWFsQ2FtZXJhIiArIG9zLnNlcCkKICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKHBhdGgpOgogICAgICAgIG9zLm1ha2VkaXJzKHBhdGgpCiAgICBpZiBfYmEuZ2V0X2ZvcmVncm91bmRfaG9zdF9hY3Rpdml0eSgpIT1Ob25lIGFuZCBsZW4oc2F2ZV9kaWN0KSA9PSA2OgogICAgICAgIGZpbGUgPSBvcGVuKHBhdGgrbmFtZSsiLmpzb24iLCJ3IikKICAgICAgICBmaWxlLndyaXRlKGpzb24uZHVtcHMobmV3KSkKICAgICAgICBmaWxlLmNsb3NlKCkKICAgICAgICBfYmEuc2NyZWVubWVzc2FnZShmIkNhbWVyYSB7bmFtZX0gU2F2ZWQiKQogICAgZWxzZToKICAgICAgICBfYmEuc2NyZWVubWVzc2FnZSgiTm90IFNhdmVkIikKCmRlZiBfbG9hZChuYW1lKToKICAgIHBhdGg9b3MucGF0aC5qb2luKF9iYS5lbnYoKVsicHl0aG9uX2RpcmVjdG9yeV91c2VyIl0sIk1hbnVhbENhbWVyYSIgKyBvcy5zZXApCiAgICBmaWxlID0gb3BlbihwYXRoK25hbWUrIi5qc29uIiwiciIpCiAgICBmbCA9IGpzb24ubG9hZHMoZmlsZS5yZWFkKCkpCiAgICBpZiBuYW1lIGluIGZsOgogICAgICAgIG1hcENhbWVyYSA9IGZsW25hbWVdCiAgICAgICAgbmV3X2RpY3RbIlJpZ2h0Il0gPSBtYXBDYW1lcmFbMF0KICAgICAgICBuZXdfZGljdFsiVXAtRG93biJdID0gbWFwQ2FtZXJhWzFdCiAgICAgICAgbmV3X2RpY3RbIkJhY2stRm9ydGgiXSA9IG1hcENhbWVyYVsyXQogICAgICAgIG5ld19kaWN0WyJMZWZ0Il0gPSBtYXBDYW1lcmFbM10KICAgICAgICBuZXdfZGljdFsiRm9jdXMoVXAtRG93bikiXSA9IG1hcENhbWVyYVs0XQogICAgICAgIG5ld19kaWN0WyJGb2N1cyhCYWNrLUZvcnRoKSJdID0gbWFwQ2FtZXJhWzVdCiAgICAgICAgX2JhLnNjcmVlbm1lc3NhZ2UoZiJMb2FkZWQge25hbWV9IikKICAgIGVsc2U6CiAgICAgICAgX2JhLnNjcmVlbm1lc3NhZ2UoIkVudGVyIENvcnJlY3QgQ2FtZXJhIE5hbWUiKQoKZGVmIF9hcHBseWVyKCk6CiAgICBhY3Rpdml0eSA9IF9iYS5nZXRfZm9yZWdyb3VuZF9ob3N0X2FjdGl2aXR5KCkKICAgIGdub2RlID0gYWN0aXZpdHkuZ2xvYmFsc25vZGUKICAgIGdub2RlLmFyZWFfb2ZfaW50ZXJlc3RfYm91bmRzID0gKG5ld19kaWN0WyJSaWdodCJdLG5ld19kaWN0WyJVcC1Eb3duIl0sbmV3X2RpY3RbIkJhY2stRm9ydGgiXSxuZXdfZGljdFsiTGVmdCJdLG5ld19kaWN0WyJGb2N1cyhVcC1Eb3duKSJdLG5ld19kaWN0WyJGb2N1cyhCYWNrLUZvcnRoKSJdKQoKZGVmIF9jYW1lcmEoKToKICAgIGFjdGl2aXR5ID0gX2JhLmdldF9mb3JlZ3JvdW5kX2hvc3RfYWN0aXZpdHkoKQogICAgZ2wgPSBhY3Rpdml0eS5nbG9iYWxzbm9kZQogICAgaWYgZ2wuY2FtZXJhX21vZGUgPT0gImZvbGxvdyI6CiAgICAgICAgZ2wuY2FtZXJhX21vZGUgPSAicm90YXRlIgogICAgZWxzZToKICAgICAgICBnbC5jYW1lcmFfbW9kZSA9ICJmb2xsb3ciCgpkZWYgX2RhcmsoKToKICAgIGFjdGl2aXR5ID0gX2JhLmdldF9mb3JlZ3JvdW5kX2hvc3RfYWN0aXZpdHkoKQogICAgZ2wgPSBhY3Rpdml0eS5nbG9iYWxzbm9kZQogICAgZ2wudGludCA9ICgwLjUsMC43LDEpCmRlZiBfbG9nKCk6CiAgICBnbG9iYWwgbG9nCiAgICBpZiBsb2c6CiAgICAgICAgbG9nID0gRmFsc2UKICAgIGVsc2U6CiAgICAgICAgbG9nID0gVHJ1ZQpkZWYgX2luYyh2YWwpOgogICAgZ2xvYmFsIGluYwogICAgdHJ5OgogICAgICAgIGlmIGZsb2F0KHZhbCkgPiAwLjAgYW5kIGZsb2F0KHZhbCkgPD0gMi4wOgogICAgICAgICAgICBpbmMgPSBmbG9hdCh2YWxbMDozXSkKICAgICAgICAgICAgX2JhLnNjcmVlbm1lc3NhZ2UoZiJJbmNyZW1lbnQgQ2hhbmdlZCBUbyB7aW5jfSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgX2JhLnNjcmVlbm1lc3NhZ2UoIkluY3JlbWVudCBTaG91bGQgQmUgTGVzcyBUaGFuIDIgQW5kIEdyZWF0ZXIgVGhhbiAwIikKICAgIGV4Y2VwdDoKICAgICAgICBfYmEuc2NyZWVubWVzc2FnZSgiTXVzdCBCZSBBIEludGVnZXIvRGVjaW1hbCIpCmNtPV9iYS5jaGF0bWVzc2FnZQoKZGVmIF9uZXdfY2hhdG1lc3NhZ2UobXNnKToKICAgIGlmIG1zZy5zcGxpdCgiICIpWzBdPT0iL3NhdmUiOgogICAgICAgIGlmIGxlbihtc2cuc3BsaXQoIiAiKSk+MToKICAgICAgICAgICAgX3NhdmUobXNnLnNwbGl0KCIgIilbMV0ubG93ZXIoKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBfYmEuc2NyZWVubWVzc2FnZSgiRW50ZXIgQ2FtZXJhIE5hbWUiKQogICAgZWxpZiBtc2cuc3BsaXQoIiAiKVswXT09Ii9sb2FkIjoKICAgICAgICBpZiBsZW4obXNnLnNwbGl0KCIgIikpPjE6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIF9sb2FkKG1zZy5zcGxpdCgiICIpWzFdLmxvd2VyKCkpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIF9iYS5zY3JlZW5tZXNzYWdlKCJDYW1lcmEgTm90IEZvdW5kIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBfYmEuc2NyZWVubWVzc2FnZSgiRW50ZXIgQ2FtZXJhIE5hbWUiKQogICAgZWxpZiBtc2cgPT0gIi9jYW1lcmFNb2RlIiBvciBtc2cgPT0gIi9jTSI6CiAgICAgICAgX2NhbWVyYSgpCiAgICBlbGlmIG1zZyA9PSAiL2RhcmsiOgogICAgICAgIF9kYXJrKCkKICAgIGVsaWYgbXNnID09ICIvcnVuIjoKICAgICAgICBfYXBwbHllcigpCiAgICBlbGlmIG1zZyA9PSAiL2xvZyI6CiAgICAgICAgX2xvZygpCiAgICBlbGlmIG1zZy5zcGxpdCgiICIpWzBdID09ICIvaW5jIjoKICAgICAgICBpZiBsZW4obXNnLnNwbGl0KCIgIikpID4gMToKICAgICAgICAgICAgX2luYyhtc2cuc3BsaXQoIiAiKVsxXSkKICAgIGVsc2U6CiAgICAgICAgY20obXNnKQpfYmEuY2hhdG1lc3NhZ2U9X25ld19jaGF0bWVzc2FnZQ=='))

# ba_meta export plugin
class xD(ba.Plugin):
    def __init__(self):
        _ba.set_party_icon_always_visible(True)